// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Paraglider.DAL;

namespace Paraglider.DAL.Migrations
{
    [DbContext(typeof(ParagliderContext))]
    partial class ParagliderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Paraglider.DAL.Models.Certificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CerttificatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsValide")
                        .HasColumnType("bit");

                    b.HasKey("CertificateId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            CertificateId = 1,
                            CerttificatName = "No grade",
                            IsValide = true
                        },
                        new
                        {
                            CertificateId = 2,
                            CerttificatName = "Begginer",
                            IsValide = true
                        },
                        new
                        {
                            CertificateId = 3,
                            CerttificatName = "Medior",
                            IsValide = true
                        },
                        new
                        {
                            CertificateId = 4,
                            CerttificatName = "Advanced",
                            IsValide = true
                        },
                        new
                        {
                            CertificateId = 5,
                            CerttificatName = "Master",
                            IsValide = true
                        });
                });

            modelBuilder.Entity("Paraglider.DAL.Models.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FlightDate")
                        .HasColumnType("date");

                    b.Property<decimal>("FlightDuration")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsValide")
                        .HasColumnType("bit");

                    b.Property<int>("ParagliderId")
                        .HasColumnType("int");

                    b.Property<int>("PilotId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.HasKey("FlightId");

                    b.HasIndex("ParagliderId");

                    b.HasIndex("PilotId");

                    b.HasIndex("SiteId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            FlightId = 1,
                            FlightDate = new DateTime(2018, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightDuration = 1m,
                            IsValide = true,
                            ParagliderId = 1,
                            PilotId = 1,
                            SiteId = 1
                        },
                        new
                        {
                            FlightId = 2,
                            FlightDate = new DateTime(2018, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightDuration = 2m,
                            IsValide = true,
                            ParagliderId = 4,
                            PilotId = 2,
                            SiteId = 2
                        },
                        new
                        {
                            FlightId = 3,
                            FlightDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightDuration = 2m,
                            IsValide = true,
                            ParagliderId = 5,
                            PilotId = 3,
                            SiteId = 3
                        });
                });

            modelBuilder.Entity("Paraglider.DAL.Models.LandingSite", b =>
                {
                    b.Property<int>("LandingSiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Approach")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LandingSiteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.HasKey("LandingSiteId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SiteId");

                    b.ToTable("LandingSites");

                    b.HasData(
                        new
                        {
                            LandingSiteId = 1,
                            Approach = "",
                            IsActive = true,
                            LandingSiteName = "Sommet",
                            LevelId = 1,
                            SiteId = 2
                        },
                        new
                        {
                            LandingSiteId = 2,
                            Approach = "",
                            IsActive = true,
                            LandingSiteName = "West landing site",
                            LevelId = 1,
                            SiteId = 2
                        },
                        new
                        {
                            LandingSiteId = 3,
                            Approach = "",
                            IsActive = true,
                            LandingSiteName = "Delta",
                            LevelId = 1,
                            SiteId = 1
                        },
                        new
                        {
                            LandingSiteId = 4,
                            Approach = "",
                            IsActive = true,
                            LandingSiteName = "Hallage",
                            LevelId = 1,
                            SiteId = 1
                        },
                        new
                        {
                            LandingSiteId = 5,
                            Approach = "",
                            IsActive = true,
                            LandingSiteName = "Main landing site",
                            LevelId = 1,
                            SiteId = 3
                        },
                        new
                        {
                            LandingSiteId = 6,
                            Approach = "",
                            IsActive = true,
                            LandingSiteName = "Au Sommet",
                            LevelId = 1,
                            SiteId = 4
                        },
                        new
                        {
                            LandingSiteId = 7,
                            Approach = "",
                            IsActive = true,
                            LandingSiteName = "Landung site 1",
                            LevelId = 1,
                            SiteId = 4
                        },
                        new
                        {
                            LandingSiteId = 8,
                            Approach = "",
                            IsActive = true,
                            LandingSiteName = "Landing site 2",
                            LevelId = 1,
                            SiteId = 4
                        });
                });

            modelBuilder.Entity("Paraglider.DAL.Models.LaunchingSite", b =>
                {
                    b.Property<int>("LaunchingSiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Approach")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LaunchingSiteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.HasKey("LaunchingSiteId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SiteId");

                    b.ToTable("LaunchingSites");

                    b.HasData(
                        new
                        {
                            LaunchingSiteId = 1,
                            Approach = "",
                            IsActive = true,
                            LaunchingSiteName = "Main 7 Meuses launching site",
                            LevelId = 1,
                            SiteId = 2
                        },
                        new
                        {
                            LaunchingSiteId = 2,
                            Approach = "",
                            IsActive = true,
                            LaunchingSiteName = "Main West Coo launching site",
                            LevelId = 1,
                            SiteId = 1
                        },
                        new
                        {
                            LaunchingSiteId = 3,
                            Approach = "",
                            IsActive = true,
                            LaunchingSiteName = "Main Prayon laucnhing site",
                            LevelId = 1,
                            SiteId = 3
                        },
                        new
                        {
                            LaunchingSiteId = 4,
                            Approach = "",
                            IsActive = true,
                            LaunchingSiteName = "Main Beauraing launching site",
                            LevelId = 1,
                            SiteId = 4
                        });
                });

            modelBuilder.Entity("Paraglider.DAL.Models.Level", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LevelId");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            LevelId = 1,
                            Description = "Only easy launching and landing sites with easy approatches only (Level 1)",
                            IsActive = false,
                            Name = "Begginer"
                        },
                        new
                        {
                            LevelId = 2,
                            Description = "Can take two mediums launching and landing sites (Level 1-3)",
                            IsActive = false,
                            Name = "Medior"
                        },
                        new
                        {
                            LevelId = 3,
                            Description = "Can take ALL kind of sites (Level 1-5) can teach easy sites (Level 1-2)",
                            IsActive = false,
                            Name = "Expert"
                        },
                        new
                        {
                            LevelId = 4,
                            Description = "Can take ALL kind of sites and can teach on all kind of sites (Level 1-5)",
                            IsActive = false,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("Paraglider.DAL.Models.Membership", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MembershipAmount")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("MembershipId");

                    b.ToTable("Memberships");

                    b.HasData(
                        new
                        {
                            MembershipId = 1,
                            IsActive = true,
                            MembershipAmount = 128.2m
                        },
                        new
                        {
                            MembershipId = 2,
                            IsActive = true,
                            MembershipAmount = 54.99m
                        },
                        new
                        {
                            MembershipId = 3,
                            IsActive = false,
                            MembershipAmount = 88.25m
                        },
                        new
                        {
                            MembershipId = 4,
                            IsActive = true,
                            MembershipAmount = 220m
                        });
                });

            modelBuilder.Entity("Paraglider.DAL.Models.Paraglider", b =>
                {
                    b.Property<int>("ParagliderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfService")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateOfUse")
                        .HasColumnType("date");

                    b.Property<decimal>("FlightHours")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ParagliderModelId")
                        .HasColumnType("int");

                    b.HasKey("ParagliderId");

                    b.HasIndex("ParagliderModelId");

                    b.ToTable("Paragliders");

                    b.HasData(
                        new
                        {
                            ParagliderId = 2,
                            DateOfService = new DateTime(2019, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfUse = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightHours = 30m,
                            IsActive = true,
                            ParagliderModelId = 1
                        },
                        new
                        {
                            ParagliderId = 3,
                            DateOfService = new DateTime(2017, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfUse = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightHours = 340m,
                            IsActive = true,
                            ParagliderModelId = 1
                        },
                        new
                        {
                            ParagliderId = 1,
                            DateOfService = new DateTime(2019, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfUse = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightHours = 26m,
                            IsActive = true,
                            ParagliderModelId = 1
                        },
                        new
                        {
                            ParagliderId = 4,
                            DateOfService = new DateTime(2018, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfUse = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightHours = 128m,
                            IsActive = true,
                            ParagliderModelId = 2
                        },
                        new
                        {
                            ParagliderId = 5,
                            DateOfService = new DateTime(2018, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfUse = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightHours = 115m,
                            IsActive = true,
                            ParagliderModelId = 2
                        },
                        new
                        {
                            ParagliderId = 6,
                            DateOfService = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfUse = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightHours = 0m,
                            IsActive = true,
                            ParagliderModelId = 3
                        });
                });

            modelBuilder.Entity("Paraglider.DAL.Models.ParagliderModel", b =>
                {
                    b.Property<int>("ParagliderModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfHomologation")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaximumWeight")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("MinimalWeight")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfHomologation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("ParagliderModelId");

                    b.ToTable("ParagliderModels");

                    b.HasData(
                        new
                        {
                            ParagliderModelId = 2,
                            DateOfHomologation = new DateTime(2018, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MaximumWeight = 95m,
                            MinimalWeight = 70m,
                            ModelName = "RAFALE",
                            ModelType = "SpeedFlying",
                            NumberOfHomologation = "EN 961-1",
                            Size = 0m
                        },
                        new
                        {
                            ParagliderModelId = 3,
                            DateOfHomologation = new DateTime(2018, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MaximumWeight = 80m,
                            MinimalWeight = 60m,
                            ModelName = "WHIZZ",
                            ModelType = "Hybride",
                            NumberOfHomologation = "EN 926-2",
                            Size = 0m
                        },
                        new
                        {
                            ParagliderModelId = 1,
                            DateOfHomologation = new DateTime(2018, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            MaximumWeight = 105m,
                            MinimalWeight = 70m,
                            ModelName = "SPANTIK",
                            ModelType = "SoloWings",
                            NumberOfHomologation = "EN 926",
                            Size = 0m
                        });
                });

            modelBuilder.Entity("Paraglider.DAL.Models.Pilot", b =>
                {
                    b.Property<int>("PilotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("PilotId");

                    b.HasIndex("RoleId")
                        .IsUnique()
                        .HasFilter("[RoleId] IS NOT NULL");

                    b.ToTable("Pilots");

                    b.HasData(
                        new
                        {
                            PilotId = 1,
                            Email = "A@h.com",
                            FirstName = "Abdel",
                            IsActive = true,
                            LastName = "Hnini",
                            PhoneNumber = "0499999999",
                            RoleId = 3,
                            Weight = 80m
                        },
                        new
                        {
                            PilotId = 2,
                            Email = "Y@b.com",
                            FirstName = "Yves",
                            IsActive = true,
                            LastName = "Blavier",
                            PhoneNumber = "0488888888",
                            RoleId = 1,
                            Weight = 75m
                        },
                        new
                        {
                            PilotId = 3,
                            Email = "A@t.be",
                            FirstName = "Antho",
                            IsActive = true,
                            LastName = "Truc",
                            PhoneNumber = "0477777777",
                            RoleId = 2,
                            Weight = 58m
                        },
                        new
                        {
                            PilotId = 4,
                            Email = "L@S.be",
                            FirstName = "Lucky",
                            IsActive = true,
                            LastName = "Str",
                            PhoneNumber = "0466666666",
                            Weight = 64m
                        });
                });

            modelBuilder.Entity("Paraglider.DAL.Models.PilotCertificate", b =>
                {
                    b.Property<int>("PilotId")
                        .HasColumnType("int");

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfSucc")
                        .HasColumnType("date");

                    b.HasKey("PilotId", "CertificateId");

                    b.HasIndex("CertificateId");

                    b.ToTable("PilotCertificates");

                    b.HasData(
                        new
                        {
                            PilotId = 1,
                            CertificateId = 1,
                            DateOfSucc = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotId = 2,
                            CertificateId = 2,
                            DateOfSucc = new DateTime(2018, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotId = 3,
                            CertificateId = 3,
                            DateOfSucc = new DateTime(2019, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotId = 4,
                            CertificateId = 4,
                            DateOfSucc = new DateTime(2019, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Paraglider.DAL.Models.PilotMembership", b =>
                {
                    b.Property<int>("PilotId")
                        .HasColumnType("int");

                    b.Property<int>("MembershipId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfPay")
                        .HasColumnType("date");

                    b.HasKey("PilotId", "MembershipId");

                    b.HasIndex("MembershipId");

                    b.ToTable("PilotMemberships");

                    b.HasData(
                        new
                        {
                            PilotId = 1,
                            MembershipId = 2,
                            DateOfPay = new DateTime(2018, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotId = 2,
                            MembershipId = 4,
                            DateOfPay = new DateTime(2018, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotId = 3,
                            MembershipId = 3,
                            DateOfPay = new DateTime(2018, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PilotId = 4,
                            MembershipId = 1,
                            DateOfPay = new DateTime(2018, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Paraglider.DAL.Models.PilotTraineeship", b =>
                {
                    b.Property<int>("PilotId")
                        .HasColumnType("int");

                    b.Property<int>("TraineeshipId")
                        .HasColumnType("int");

                    b.Property<bool>("FollowExam")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTreacher")
                        .HasColumnType("bit");

                    b.HasKey("PilotId", "TraineeshipId");

                    b.HasIndex("TraineeshipId");

                    b.ToTable("PilotTraineeships");

                    b.HasData(
                        new
                        {
                            PilotId = 1,
                            TraineeshipId = 1,
                            FollowExam = false,
                            IsTreacher = false
                        },
                        new
                        {
                            PilotId = 2,
                            TraineeshipId = 2,
                            FollowExam = false,
                            IsTreacher = true
                        },
                        new
                        {
                            PilotId = 3,
                            TraineeshipId = 6,
                            FollowExam = true,
                            IsTreacher = false
                        },
                        new
                        {
                            PilotId = 4,
                            TraineeshipId = 3,
                            FollowExam = false,
                            IsTreacher = true
                        });
                });

            modelBuilder.Entity("Paraglider.DAL.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PilotId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            IsActive = true,
                            PilotId = 1,
                            RoleName = "CEO"
                        },
                        new
                        {
                            RoleId = 2,
                            IsActive = true,
                            PilotId = 2,
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            IsActive = false,
                            PilotId = 3,
                            RoleName = "Secretary"
                        });
                });

            modelBuilder.Entity("Paraglider.DAL.Models.Site", b =>
                {
                    b.Property<int>("SiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommuneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Orientation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteGeoCoordinate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SiteId");

                    b.ToTable("Sites");

                    b.HasData(
                        new
                        {
                            SiteId = 1,
                            CommuneName = "West Coo",
                            IsActive = true,
                            Orientation = "West",
                            SiteGeoCoordinate = "50.39861°N 5.88778°E",
                            ZipCode = "4970"
                        },
                        new
                        {
                            SiteId = 2,
                            CommuneName = "7 Meuses",
                            IsActive = true,
                            Orientation = "Sud",
                            SiteGeoCoordinate = "50.354166667°N 4.86083333°E",
                            ZipCode = "5170"
                        },
                        new
                        {
                            SiteId = 3,
                            CommuneName = "Prayon",
                            IsActive = true,
                            Orientation = "N-E",
                            SiteGeoCoordinate = "50.575893°N 5.6566°E",
                            ZipCode = "4870"
                        },
                        new
                        {
                            SiteId = 4,
                            CommuneName = "Beauraing",
                            IsActive = true,
                            Orientation = "N",
                            SiteGeoCoordinate = "50.1130°N 5.0093°E",
                            ZipCode = "5570"
                        });
                });

            modelBuilder.Entity("Paraglider.DAL.Models.Traineeship", b =>
                {
                    b.Property<int>("TraineeshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CertificateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfEnd")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateOfStart")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<decimal>("Prize")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("TraineeshipId");

                    b.HasIndex("CertificateId");

                    b.HasIndex("LevelId");

                    b.ToTable("Traineeships");

                    b.HasData(
                        new
                        {
                            TraineeshipId = 1,
                            DateOfEnd = new DateTime(2019, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfStart = new DateTime(2019, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LevelId = 1,
                            Prize = 80.5m
                        },
                        new
                        {
                            TraineeshipId = 2,
                            DateOfEnd = new DateTime(2019, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfStart = new DateTime(2019, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LevelId = 2,
                            Prize = 92m
                        },
                        new
                        {
                            TraineeshipId = 3,
                            DateOfEnd = new DateTime(2020, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfStart = new DateTime(2020, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LevelId = 3,
                            Prize = 80.99m
                        },
                        new
                        {
                            TraineeshipId = 4,
                            DateOfEnd = new DateTime(2019, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfStart = new DateTime(2019, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LevelId = 3,
                            Prize = 123.99m
                        },
                        new
                        {
                            TraineeshipId = 5,
                            DateOfEnd = new DateTime(2018, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfStart = new DateTime(2018, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LevelId = 2,
                            Prize = 49m
                        },
                        new
                        {
                            TraineeshipId = 6,
                            DateOfEnd = new DateTime(2018, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfStart = new DateTime(2018, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LevelId = 4,
                            Prize = 199.99m
                        });
                });

            modelBuilder.Entity("Paraglider.DAL.Models.Flight", b =>
                {
                    b.HasOne("Paraglider.DAL.Models.Paraglider", "Paraglider")
                        .WithMany("Flights")
                        .HasForeignKey("ParagliderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Paraglider.DAL.Models.Pilot", "Pilot")
                        .WithMany("Flights")
                        .HasForeignKey("PilotId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Paraglider.DAL.Models.Site", "Site")
                        .WithMany("Flights")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Paraglider.DAL.Models.LandingSite", b =>
                {
                    b.HasOne("Paraglider.DAL.Models.Level", "Level")
                        .WithMany("LandingSites")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Paraglider.DAL.Models.Site", "Site")
                        .WithMany("LandingSites")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Paraglider.DAL.Models.LaunchingSite", b =>
                {
                    b.HasOne("Paraglider.DAL.Models.Level", "Level")
                        .WithMany("LaunchingSites")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Paraglider.DAL.Models.Site", "Site")
                        .WithMany("LaunchingSites")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Paraglider.DAL.Models.Paraglider", b =>
                {
                    b.HasOne("Paraglider.DAL.Models.ParagliderModel", "ParagliderModel")
                        .WithMany("Paragliders")
                        .HasForeignKey("ParagliderModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Paraglider.DAL.Models.Pilot", b =>
                {
                    b.HasOne("Paraglider.DAL.Models.Role", "Role")
                        .WithOne("Pilot")
                        .HasForeignKey("Paraglider.DAL.Models.Pilot", "RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Paraglider.DAL.Models.PilotCertificate", b =>
                {
                    b.HasOne("Paraglider.DAL.Models.Certificate", "Certificate")
                        .WithMany("PilotCertificates")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Paraglider.DAL.Models.Pilot", "Pilot")
                        .WithMany("PilotCertificates")
                        .HasForeignKey("PilotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Paraglider.DAL.Models.PilotMembership", b =>
                {
                    b.HasOne("Paraglider.DAL.Models.Membership", "Membership")
                        .WithMany("PilotMemberships")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Paraglider.DAL.Models.Pilot", "Pilot")
                        .WithMany("PilotMemberships")
                        .HasForeignKey("PilotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Paraglider.DAL.Models.PilotTraineeship", b =>
                {
                    b.HasOne("Paraglider.DAL.Models.Pilot", "Pilot")
                        .WithMany("PilotTraineeships")
                        .HasForeignKey("PilotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Paraglider.DAL.Models.Traineeship", "Traineeship")
                        .WithMany("PilotTraineeships")
                        .HasForeignKey("TraineeshipId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Paraglider.DAL.Models.Traineeship", b =>
                {
                    b.HasOne("Paraglider.DAL.Models.Certificate", "Certificate")
                        .WithMany("Traineeships")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Paraglider.DAL.Models.Level", "Level")
                        .WithMany("Traineeships")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
